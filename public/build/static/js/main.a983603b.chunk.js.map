{"version":3,"sources":["App.js","components/Home.js","components/login.js","serviceWorker.js","index.js"],"names":["App","className","href","Component","Home","props","signout","cookies","remove","setState","login","componentWillMount","load","username","state","this","type","onClick","value","to","Login","handleSubmit","event","preventDefault","axios","post","password","then","res","console","log","data","status","error","save","catch","err","handleUsernameChange","target","handlePasswordChange","errorMessage","style","color","pathname","onSubmit","htmlFor","id","required","autoComplete","onChange","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a983603b.chunk.js","sourcesContent":["import React,{Component} from 'react';\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"container\">\n        <h1>Welcome to the Food Blog</h1>\n        <a href=\"/login\">Login</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React,{Component} from 'react';\r\nimport cookies from \"react-cookies\";\r\nimport Login from './login';\r\nimport { BrowserRouter as Router, Route, Redirect} from 'react-router-dom'\r\nclass Home extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state={login:false,username:\"\"}\r\n    }\r\nsignout=()=>{\r\n    cookies.remove(\"username\");\r\n    this.setState({login:false})\r\n}\r\n componentWillMount=()=>{\r\n     if(cookies.load(\"username\")){\r\n        this.setState({login:true,username:cookies.load(\"username\")});\r\n     }\r\n    }\r\n  render(){\r\n      if(this.state.login){    \r\n        return (\r\n            <div className=\"container\">\r\n             Welcome {this.state.username}\r\n            <input type=\"button\" onClick={this.signout} value=\"Singout\"/>\r\n            </div>\r\n        );\r\n      }\r\n      else{\r\n            return(<Redirect to=\"/login\"></Redirect>)\r\n      }\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React,{Component} from 'react';\r\nimport axios from \"axios\";\r\nimport cookies from \"react-cookies\";\r\nimport Home from \"./Home\";\r\nimport { BrowserRouter as Router, Route, Redirect} from 'react-router-dom'\r\nclass Login extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={login:false,username:\"\",password:\"\",error:false}\r\n    }\r\n    componentWillMount=()=>{\r\n        if(cookies.load(\"username\")){\r\n            this.setState({login:true});\r\n        }\r\n    }\r\n    handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        axios.post(\"/login\",{username:this.state.username,password:this.state.password}).then((res)=>{\r\n            console.log(res.data)\r\n            if(res.data.status==\"success\"){\r\n                if(res.data.login){\r\n                    this.setState({error:false});\r\n                    cookies.save('username',this.state.username);\r\n                    this.setState({login:true});\r\n                }\r\n                else{\r\n                    this.setState({error:\"User Doesnot Exist\"});\r\n                }\r\n            }\r\n        }).catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n    handleUsernameChange=(event)=>{\r\n        this.setState({username:event.target.value});\r\n    }\r\n    handlePasswordChange=(event)=>{\r\n        this.setState({password:event.target.value});\r\n    }\r\n    render(){\r\n    var errorMessage=this.state.error?(<span style={{color:\"red\"}} className=\"error-message\">{this.state.error}</span>):null;\r\n    if(this.state.login){\r\n        return(<Redirect to={{\r\n            pathname: '/home',\r\n        }}></Redirect>);\r\n    }\r\n    else{\r\n        return (<div className=\"container\">\r\n        <form onSubmit={this.handleSubmit}>\r\n            {errorMessage}\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username:</label>\r\n            <input\r\n            id=\"username\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            required\r\n            autoComplete=\"on\"\r\n            value={this.state.username}\r\n            onChange={this.handleUsernameChange}\r\n            />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password:</label>\r\n            <input\r\n            id=\"password\"\r\n            className=\"form-control\"\r\n            type=\"password\"\r\n            required\r\n            autoComplete=\"on\"\r\n            value={this.state.password}\r\n            onChange={this.handlePasswordChange}\r\n            />\r\n        </div>\r\n        <input className=\"btn btn-primary\" id=\"submit\" type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n        </div>\r\n    );    \r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default Login;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './components/login';\nimport Home from \"./components/Home\"\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(<Router>\n    <Route exact path=\"/\" component={App}/>\n    <Route exact path=\"/login\" component={Login}/>\n    <Route exact path=\"/home\" component={Home}/>\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}